// Code generated by MockGen. DO NOT EDIT.
// Source: config/configUser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetAccessTokenExpiry mocks base method.
func (m *MockUser) GetAccessTokenExpiry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenExpiry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAccessTokenExpiry indicates an expected call of GetAccessTokenExpiry.
func (mr *MockUserMockRecorder) GetAccessTokenExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenExpiry", reflect.TypeOf((*MockUser)(nil).GetAccessTokenExpiry))
}

// GetLoginAttemptSessionPeriod mocks base method.
func (m *MockUser) GetLoginAttemptSessionPeriod() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginAttemptSessionPeriod")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetLoginAttemptSessionPeriod indicates an expected call of GetLoginAttemptSessionPeriod.
func (mr *MockUserMockRecorder) GetLoginAttemptSessionPeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginAttemptSessionPeriod", reflect.TypeOf((*MockUser)(nil).GetLoginAttemptSessionPeriod))
}

// GetMaxLoginAttempt mocks base method.
func (m *MockUser) GetMaxLoginAttempt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxLoginAttempt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxLoginAttempt indicates an expected call of GetMaxLoginAttempt.
func (mr *MockUserMockRecorder) GetMaxLoginAttempt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxLoginAttempt", reflect.TypeOf((*MockUser)(nil).GetMaxLoginAttempt))
}

// GetPasswordHashCost mocks base method.
func (m *MockUser) GetPasswordHashCost() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHashCost")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPasswordHashCost indicates an expected call of GetPasswordHashCost.
func (mr *MockUserMockRecorder) GetPasswordHashCost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHashCost", reflect.TypeOf((*MockUser)(nil).GetPasswordHashCost))
}

// GetPasswordResetLink mocks base method.
func (m *MockUser) GetPasswordResetLink() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetLink")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPasswordResetLink indicates an expected call of GetPasswordResetLink.
func (mr *MockUserMockRecorder) GetPasswordResetLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetLink", reflect.TypeOf((*MockUser)(nil).GetPasswordResetLink))
}

// GetPasswordResetTokenExpiry mocks base method.
func (m *MockUser) GetPasswordResetTokenExpiry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetTokenExpiry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPasswordResetTokenExpiry indicates an expected call of GetPasswordResetTokenExpiry.
func (mr *MockUserMockRecorder) GetPasswordResetTokenExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetTokenExpiry", reflect.TypeOf((*MockUser)(nil).GetPasswordResetTokenExpiry))
}

// GetRefreshTokenEnabled mocks base method.
func (m *MockUser) GetRefreshTokenEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetRefreshTokenEnabled indicates an expected call of GetRefreshTokenEnabled.
func (mr *MockUserMockRecorder) GetRefreshTokenEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenEnabled", reflect.TypeOf((*MockUser)(nil).GetRefreshTokenEnabled))
}

// GetRefreshTokenExpiry mocks base method.
func (m *MockUser) GetRefreshTokenExpiry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenExpiry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRefreshTokenExpiry indicates an expected call of GetRefreshTokenExpiry.
func (mr *MockUserMockRecorder) GetRefreshTokenExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenExpiry", reflect.TypeOf((*MockUser)(nil).GetRefreshTokenExpiry))
}

// GetRefreshTokenRotationEnabled mocks base method.
func (m *MockUser) GetRefreshTokenRotationEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenRotationEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetRefreshTokenRotationEnabled indicates an expected call of GetRefreshTokenRotationEnabled.
func (mr *MockUserMockRecorder) GetRefreshTokenRotationEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenRotationEnabled", reflect.TypeOf((*MockUser)(nil).GetRefreshTokenRotationEnabled))
}

// GetVerificationLink mocks base method.
func (m *MockUser) GetVerificationLink() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationLink")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVerificationLink indicates an expected call of GetVerificationLink.
func (mr *MockUserMockRecorder) GetVerificationLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationLink", reflect.TypeOf((*MockUser)(nil).GetVerificationLink))
}

// GetVerificationTokenExpiry mocks base method.
func (m *MockUser) GetVerificationTokenExpiry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationTokenExpiry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetVerificationTokenExpiry indicates an expected call of GetVerificationTokenExpiry.
func (mr *MockUserMockRecorder) GetVerificationTokenExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationTokenExpiry", reflect.TypeOf((*MockUser)(nil).GetVerificationTokenExpiry))
}
