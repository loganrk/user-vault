// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/loganrk/user-vault/internal/core/port (interfaces: RepositoryMySQL)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/loganrk/user-vault/internal/core/domain"
)

// MockRepositoryMySQL is a mock of RepositoryMySQL interface.
type MockRepositoryMySQL struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMySQLMockRecorder
}

// MockRepositoryMySQLMockRecorder is the mock recorder for MockRepositoryMySQL.
type MockRepositoryMySQLMockRecorder struct {
	mock *MockRepositoryMySQL
}

// NewMockRepositoryMySQL creates a new mock instance.
func NewMockRepositoryMySQL(ctrl *gomock.Controller) *MockRepositoryMySQL {
	mock := &MockRepositoryMySQL{ctrl: ctrl}
	mock.recorder = &MockRepositoryMySQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryMySQL) EXPECT() *MockRepositoryMySQLMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockRepositoryMySQL) AutoMigrate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutoMigrate")
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockRepositoryMySQLMockRecorder) AutoMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockRepositoryMySQL)(nil).AutoMigrate))
}

// CreateToken mocks base method.
func (m *MockRepositoryMySQL) CreateToken(arg0 context.Context, arg1 domain.UserTokens) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockRepositoryMySQLMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockRepositoryMySQL)(nil).CreateToken), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockRepositoryMySQL) CreateUser(arg0 context.Context, arg1 domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMySQLMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryMySQL)(nil).CreateUser), arg0, arg1)
}

// CreateUserLoginAttempt mocks base method.
func (m *MockRepositoryMySQL) CreateUserLoginAttempt(arg0 context.Context, arg1 domain.UserLoginAttempt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLoginAttempt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserLoginAttempt indicates an expected call of CreateUserLoginAttempt.
func (mr *MockRepositoryMySQLMockRecorder) CreateUserLoginAttempt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLoginAttempt", reflect.TypeOf((*MockRepositoryMySQL)(nil).CreateUserLoginAttempt), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockRepositoryMySQL) GetUserByEmail(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByEmailOrPhone mocks base method.
func (m *MockRepositoryMySQL) GetUserByEmailOrPhone(arg0 context.Context, arg1, arg2 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailOrPhone", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailOrPhone indicates an expected call of GetUserByEmailOrPhone.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByEmailOrPhone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrPhone", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByEmailOrPhone), arg0, arg1, arg2)
}

// GetUserByPhone mocks base method.
func (m *MockRepositoryMySQL) GetUserByPhone(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByPhone), arg0, arg1)
}

// GetUserByUserID mocks base method.
func (m *MockRepositoryMySQL) GetUserByUserID(arg0 context.Context, arg1 int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByUserID), arg0, arg1)
}

// GetUserLastTokenByUserId mocks base method.
func (m *MockRepositoryMySQL) GetUserLastTokenByUserId(arg0 context.Context, arg1 int8, arg2 int) (domain.UserTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLastTokenByUserId", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.UserTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLastTokenByUserId indicates an expected call of GetUserLastTokenByUserId.
func (mr *MockRepositoryMySQLMockRecorder) GetUserLastTokenByUserId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLastTokenByUserId", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserLastTokenByUserId), arg0, arg1, arg2)
}

// GetUserLoginFailedAttemptCount mocks base method.
func (m *MockRepositoryMySQL) GetUserLoginFailedAttemptCount(arg0 context.Context, arg1 int, arg2 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginFailedAttemptCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginFailedAttemptCount indicates an expected call of GetUserLoginFailedAttemptCount.
func (mr *MockRepositoryMySQLMockRecorder) GetUserLoginFailedAttemptCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginFailedAttemptCount", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserLoginFailedAttemptCount), arg0, arg1, arg2)
}

// GetUserPasswordByUserID mocks base method.
func (m *MockRepositoryMySQL) GetUserPasswordByUserID(arg0 context.Context, arg1 int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordByUserID", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordByUserID indicates an expected call of GetUserPasswordByUserID.
func (mr *MockRepositoryMySQLMockRecorder) GetUserPasswordByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordByUserID", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserPasswordByUserID), arg0, arg1)
}

// GetUserToken mocks base method.
func (m *MockRepositoryMySQL) GetUserToken(arg0 context.Context, arg1 int8, arg2 string) (domain.UserTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.UserTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToken indicates an expected call of GetUserToken.
func (mr *MockRepositoryMySQLMockRecorder) GetUserToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToken", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserToken), arg0, arg1, arg2)
}

// RevokeAllTokens mocks base method.
func (m *MockRepositoryMySQL) RevokeAllTokens(arg0 context.Context, arg1 int8, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAllTokens", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAllTokens indicates an expected call of RevokeAllTokens.
func (mr *MockRepositoryMySQLMockRecorder) RevokeAllTokens(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAllTokens", reflect.TypeOf((*MockRepositoryMySQL)(nil).RevokeAllTokens), arg0, arg1, arg2)
}

// RevokeToken mocks base method.
func (m *MockRepositoryMySQL) RevokeToken(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockRepositoryMySQLMockRecorder) RevokeToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockRepositoryMySQL)(nil).RevokeToken), arg0, arg1)
}

// UpdateEmailVerfied mocks base method.
func (m *MockRepositoryMySQL) UpdateEmailVerfied(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailVerfied", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmailVerfied indicates an expected call of UpdateEmailVerfied.
func (mr *MockRepositoryMySQLMockRecorder) UpdateEmailVerfied(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailVerfied", reflect.TypeOf((*MockRepositoryMySQL)(nil).UpdateEmailVerfied), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockRepositoryMySQL) UpdatePassword(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockRepositoryMySQLMockRecorder) UpdatePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepositoryMySQL)(nil).UpdatePassword), arg0, arg1, arg2)
}

// UpdatePhoneVerfied mocks base method.
func (m *MockRepositoryMySQL) UpdatePhoneVerfied(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneVerfied", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhoneVerfied indicates an expected call of UpdatePhoneVerfied.
func (mr *MockRepositoryMySQLMockRecorder) UpdatePhoneVerfied(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneVerfied", reflect.TypeOf((*MockRepositoryMySQL)(nil).UpdatePhoneVerfied), arg0, arg1)
}
