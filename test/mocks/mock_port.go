// Code generated by MockGen. DO NOT EDIT.
// Source: port.go

// Package port is a generated GoMock package.
package port

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	config "github.com/loganrk/user-vault/config"
	domain "github.com/loganrk/user-vault/internal/core/domain"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// UserForgotPassword mocks base method.
func (m *MockHandler) UserForgotPassword(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserForgotPassword", w, r)
}

// UserForgotPassword indicates an expected call of UserForgotPassword.
func (mr *MockHandlerMockRecorder) UserForgotPassword(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserForgotPassword", reflect.TypeOf((*MockHandler)(nil).UserForgotPassword), w, r)
}

// UserLogin mocks base method.
func (m *MockHandler) UserLogin(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserLogin", w, r)
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockHandlerMockRecorder) UserLogin(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockHandler)(nil).UserLogin), w, r)
}

// UserLogout mocks base method.
func (m *MockHandler) UserLogout(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserLogout", w, r)
}

// UserLogout indicates an expected call of UserLogout.
func (mr *MockHandlerMockRecorder) UserLogout(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogout", reflect.TypeOf((*MockHandler)(nil).UserLogout), w, r)
}

// UserOAuthLogin mocks base method.
func (m *MockHandler) UserOAuthLogin(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserOAuthLogin", w, r)
}

// UserOAuthLogin indicates an expected call of UserOAuthLogin.
func (mr *MockHandlerMockRecorder) UserOAuthLogin(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOAuthLogin", reflect.TypeOf((*MockHandler)(nil).UserOAuthLogin), w, r)
}

// UserPasswordReset mocks base method.
func (m *MockHandler) UserPasswordReset(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserPasswordReset", w, r)
}

// UserPasswordReset indicates an expected call of UserPasswordReset.
func (mr *MockHandlerMockRecorder) UserPasswordReset(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPasswordReset", reflect.TypeOf((*MockHandler)(nil).UserPasswordReset), w, r)
}

// UserRefreshToken mocks base method.
func (m *MockHandler) UserRefreshToken(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserRefreshToken", w, r)
}

// UserRefreshToken indicates an expected call of UserRefreshToken.
func (mr *MockHandlerMockRecorder) UserRefreshToken(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRefreshToken", reflect.TypeOf((*MockHandler)(nil).UserRefreshToken), w, r)
}

// UserRegister mocks base method.
func (m *MockHandler) UserRegister(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserRegister", w, r)
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockHandlerMockRecorder) UserRegister(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockHandler)(nil).UserRegister), w, r)
}

// UserResendVerification mocks base method.
func (m *MockHandler) UserResendVerification(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserResendVerification", w, r)
}

// UserResendVerification indicates an expected call of UserResendVerification.
func (mr *MockHandlerMockRecorder) UserResendVerification(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResendVerification", reflect.TypeOf((*MockHandler)(nil).UserResendVerification), w, r)
}

// UserVerify mocks base method.
func (m *MockHandler) UserVerify(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserVerify", w, r)
}

// UserVerify indicates an expected call of UserVerify.
func (mr *MockHandlerMockRecorder) UserVerify(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserVerify", reflect.TypeOf((*MockHandler)(nil).UserVerify), w, r)
}

// MockRepositoryMySQL is a mock of RepositoryMySQL interface.
type MockRepositoryMySQL struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMySQLMockRecorder
}

// MockRepositoryMySQLMockRecorder is the mock recorder for MockRepositoryMySQL.
type MockRepositoryMySQLMockRecorder struct {
	mock *MockRepositoryMySQL
}

// NewMockRepositoryMySQL creates a new mock instance.
func NewMockRepositoryMySQL(ctrl *gomock.Controller) *MockRepositoryMySQL {
	mock := &MockRepositoryMySQL{ctrl: ctrl}
	mock.recorder = &MockRepositoryMySQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryMySQL) EXPECT() *MockRepositoryMySQLMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockRepositoryMySQL) AutoMigrate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutoMigrate")
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockRepositoryMySQLMockRecorder) AutoMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockRepositoryMySQL)(nil).AutoMigrate))
}

// CreateToken mocks base method.
func (m *MockRepositoryMySQL) CreateToken(ctx context.Context, tokenData domain.UserTokens) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, tokenData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockRepositoryMySQLMockRecorder) CreateToken(ctx, tokenData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockRepositoryMySQL)(nil).CreateToken), ctx, tokenData)
}

// CreateUser mocks base method.
func (m *MockRepositoryMySQL) CreateUser(ctx context.Context, userData domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMySQLMockRecorder) CreateUser(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryMySQL)(nil).CreateUser), ctx, userData)
}

// CreateUserLoginAttempt mocks base method.
func (m *MockRepositoryMySQL) CreateUserLoginAttempt(ctx context.Context, userLoginAttempt domain.UserLoginAttempt) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLoginAttempt", ctx, userLoginAttempt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserLoginAttempt indicates an expected call of CreateUserLoginAttempt.
func (mr *MockRepositoryMySQLMockRecorder) CreateUserLoginAttempt(ctx, userLoginAttempt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLoginAttempt", reflect.TypeOf((*MockRepositoryMySQL)(nil).CreateUserLoginAttempt), ctx, userLoginAttempt)
}

// GetUserByEmail mocks base method.
func (m *MockRepositoryMySQL) GetUserByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByEmail), ctx, email)
}

// GetUserByEmailOrPhone mocks base method.
func (m *MockRepositoryMySQL) GetUserByEmailOrPhone(ctx context.Context, email, phone string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailOrPhone", ctx, email, phone)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailOrPhone indicates an expected call of GetUserByEmailOrPhone.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByEmailOrPhone(ctx, email, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrPhone", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByEmailOrPhone), ctx, email, phone)
}

// GetUserByPhone mocks base method.
func (m *MockRepositoryMySQL) GetUserByPhone(ctx context.Context, phone string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", ctx, phone)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByPhone), ctx, phone)
}

// GetUserByUserID mocks base method.
func (m *MockRepositoryMySQL) GetUserByUserID(ctx context.Context, id int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockRepositoryMySQLMockRecorder) GetUserByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserByUserID), ctx, id)
}

// GetUserLastTokenByUserId mocks base method.
func (m *MockRepositoryMySQL) GetUserLastTokenByUserId(ctx context.Context, tokenType int8, userId int) (domain.UserTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLastTokenByUserId", ctx, tokenType, userId)
	ret0, _ := ret[0].(domain.UserTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLastTokenByUserId indicates an expected call of GetUserLastTokenByUserId.
func (mr *MockRepositoryMySQLMockRecorder) GetUserLastTokenByUserId(ctx, tokenType, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLastTokenByUserId", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserLastTokenByUserId), ctx, tokenType, userId)
}

// GetUserLoginFailedAttemptCount mocks base method.
func (m *MockRepositoryMySQL) GetUserLoginFailedAttemptCount(ctx context.Context, userId int, sessionStartTime time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginFailedAttemptCount", ctx, userId, sessionStartTime)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginFailedAttemptCount indicates an expected call of GetUserLoginFailedAttemptCount.
func (mr *MockRepositoryMySQLMockRecorder) GetUserLoginFailedAttemptCount(ctx, userId, sessionStartTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginFailedAttemptCount", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserLoginFailedAttemptCount), ctx, userId, sessionStartTime)
}

// GetUserPasswordByUserID mocks base method.
func (m *MockRepositoryMySQL) GetUserPasswordByUserID(ctx context.Context, userID int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordByUserID", ctx, userID)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordByUserID indicates an expected call of GetUserPasswordByUserID.
func (mr *MockRepositoryMySQLMockRecorder) GetUserPasswordByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordByUserID", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserPasswordByUserID), ctx, userID)
}

// GetUserToken mocks base method.
func (m *MockRepositoryMySQL) GetUserToken(ctx context.Context, tokenType int8, token string) (domain.UserTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToken", ctx, tokenType, token)
	ret0, _ := ret[0].(domain.UserTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToken indicates an expected call of GetUserToken.
func (mr *MockRepositoryMySQLMockRecorder) GetUserToken(ctx, tokenType, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToken", reflect.TypeOf((*MockRepositoryMySQL)(nil).GetUserToken), ctx, tokenType, token)
}

// RevokeAllTokens mocks base method.
func (m *MockRepositoryMySQL) RevokeAllTokens(ctx context.Context, tokenType int8, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAllTokens", ctx, tokenType, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAllTokens indicates an expected call of RevokeAllTokens.
func (mr *MockRepositoryMySQLMockRecorder) RevokeAllTokens(ctx, tokenType, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAllTokens", reflect.TypeOf((*MockRepositoryMySQL)(nil).RevokeAllTokens), ctx, tokenType, userID)
}

// RevokeToken mocks base method.
func (m *MockRepositoryMySQL) RevokeToken(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockRepositoryMySQLMockRecorder) RevokeToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockRepositoryMySQL)(nil).RevokeToken), ctx, id)
}

// UpdateEmailVerfied mocks base method.
func (m *MockRepositoryMySQL) UpdateEmailVerfied(ctx context.Context, userid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailVerfied", ctx, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmailVerfied indicates an expected call of UpdateEmailVerfied.
func (mr *MockRepositoryMySQLMockRecorder) UpdateEmailVerfied(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailVerfied", reflect.TypeOf((*MockRepositoryMySQL)(nil).UpdateEmailVerfied), ctx, userid)
}

// UpdatePassword mocks base method.
func (m *MockRepositoryMySQL) UpdatePassword(ctx context.Context, userid int, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockRepositoryMySQLMockRecorder) UpdatePassword(ctx, userid, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepositoryMySQL)(nil).UpdatePassword), ctx, userid, password)
}

// UpdatePhoneVerfied mocks base method.
func (m *MockRepositoryMySQL) UpdatePhoneVerfied(ctx context.Context, userid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneVerfied", ctx, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhoneVerfied indicates an expected call of UpdatePhoneVerfied.
func (mr *MockRepositoryMySQLMockRecorder) UpdatePhoneVerfied(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneVerfied", reflect.TypeOf((*MockRepositoryMySQL)(nil).UpdatePhoneVerfied), ctx, userid)
}

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// SetupRoutes mocks base method.
func (m *MockRouter) SetupRoutes(apiConfig config.Api, logger Logger, authMiddlewareIns Auth, handler Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupRoutes", apiConfig, logger, authMiddlewareIns, handler)
}

// SetupRoutes indicates an expected call of SetupRoutes.
func (mr *MockRouterMockRecorder) SetupRoutes(apiConfig, logger, authMiddlewareIns, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupRoutes", reflect.TypeOf((*MockRouter)(nil).SetupRoutes), apiConfig, logger, authMiddlewareIns, handler)
}

// StartServer mocks base method.
func (m *MockRouter) StartServer(port string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer", port)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServer indicates an expected call of StartServer.
func (mr *MockRouterMockRecorder) StartServer(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockRouter)(nil).StartServer), port)
}

// MockCipher is a mock of Cipher interface.
type MockCipher struct {
	ctrl     *gomock.Controller
	recorder *MockCipherMockRecorder
}

// MockCipherMockRecorder is the mock recorder for MockCipher.
type MockCipherMockRecorder struct {
	mock *MockCipher
}

// NewMockCipher creates a new mock instance.
func NewMockCipher(ctrl *gomock.Controller) *MockCipher {
	mock := &MockCipher{ctrl: ctrl}
	mock.recorder = &MockCipherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCipher) EXPECT() *MockCipherMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCipher) Decrypt(cryptoText string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", cryptoText)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCipherMockRecorder) Decrypt(cryptoText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCipher)(nil).Decrypt), cryptoText)
}

// Encrypt mocks base method.
func (m *MockCipher) Encrypt(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCipherMockRecorder) Encrypt(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCipher)(nil).Encrypt), text)
}

// GetKey mocks base method.
func (m *MockCipher) GetKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockCipherMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockCipher)(nil).GetKey))
}

// MockToken is a mock of Token interface.
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken.
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance.
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockToken) CreateAccessToken(uid int, uname, name string, expiry time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", uid, uname, name, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockTokenMockRecorder) CreateAccessToken(uid, uname, name, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockToken)(nil).CreateAccessToken), uid, uname, name, expiry)
}

// CreateRefreshToken mocks base method.
func (m *MockToken) CreateRefreshToken(uid int, expiry time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", uid, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockTokenMockRecorder) CreateRefreshToken(uid, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockToken)(nil).CreateRefreshToken), uid, expiry)
}

// GetRefreshTokenData mocks base method.
func (m *MockToken) GetRefreshTokenData(encryptedToken string) (int, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenData", encryptedToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRefreshTokenData indicates an expected call of GetRefreshTokenData.
func (mr *MockTokenMockRecorder) GetRefreshTokenData(encryptedToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenData", reflect.TypeOf((*MockToken)(nil).GetRefreshTokenData), encryptedToken)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// ValidateApiKey mocks base method.
func (m *MockAuth) ValidateApiKey() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApiKey")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// ValidateApiKey indicates an expected call of ValidateApiKey.
func (mr *MockAuthMockRecorder) ValidateApiKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApiKey", reflect.TypeOf((*MockAuth)(nil).ValidateApiKey))
}

// ValidateRefreshToken mocks base method.
func (m *MockAuth) ValidateRefreshToken() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockAuthMockRecorder) ValidateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockAuth)(nil).ValidateRefreshToken))
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(ctx context.Context, messages ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(ctx interface{}, messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(ctx context.Context, template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Debugw mocks base method.
func (m *MockLogger) Debugw(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugw", varargs...)
}

// Debugw indicates an expected call of Debugw.
func (mr *MockLoggerMockRecorder) Debugw(ctx, msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugw", reflect.TypeOf((*MockLogger)(nil).Debugw), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(ctx context.Context, messages ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(ctx interface{}, messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(ctx context.Context, template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Errorw mocks base method.
func (m *MockLogger) Errorw(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorw", varargs...)
}

// Errorw indicates an expected call of Errorw.
func (mr *MockLoggerMockRecorder) Errorw(ctx, msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorw", reflect.TypeOf((*MockLogger)(nil).Errorw), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(ctx context.Context, messages ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(ctx interface{}, messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), varargs...)
}

// Fatalf mocks base method.
func (m *MockLogger) Fatalf(ctx context.Context, template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggerMockRecorder) Fatalf(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// Fatalw mocks base method.
func (m *MockLogger) Fatalw(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalw", varargs...)
}

// Fatalw indicates an expected call of Fatalw.
func (mr *MockLoggerMockRecorder) Fatalw(ctx, msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalw", reflect.TypeOf((*MockLogger)(nil).Fatalw), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(ctx context.Context, messages ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(ctx interface{}, messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(ctx context.Context, template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Infow mocks base method.
func (m *MockLogger) Infow(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infow", varargs...)
}

// Infow indicates an expected call of Infow.
func (mr *MockLoggerMockRecorder) Infow(ctx, msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infow", reflect.TypeOf((*MockLogger)(nil).Infow), varargs...)
}

// Sync mocks base method.
func (m *MockLogger) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockLoggerMockRecorder) Sync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockLogger)(nil).Sync), ctx)
}

// Warn mocks base method.
func (m *MockLogger) Warn(ctx context.Context, messages ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(ctx interface{}, messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(ctx context.Context, template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// Warnw mocks base method.
func (m *MockLogger) Warnw(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnw", varargs...)
}

// Warnw indicates an expected call of Warnw.
func (mr *MockLoggerMockRecorder) Warnw(ctx, msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnw", reflect.TypeOf((*MockLogger)(nil).Warnw), varargs...)
}

// MockMessager is a mock of Messager interface.
type MockMessager struct {
	ctrl     *gomock.Controller
	recorder *MockMessagerMockRecorder
}

// MockMessagerMockRecorder is the mock recorder for MockMessager.
type MockMessagerMockRecorder struct {
	mock *MockMessager
}

// NewMockMessager creates a new mock instance.
func NewMockMessager(ctrl *gomock.Controller) *MockMessager {
	mock := &MockMessager{ctrl: ctrl}
	mock.recorder = &MockMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessager) EXPECT() *MockMessagerMockRecorder {
	return m.recorder
}

// PublishPasswordResetEmail mocks base method.
func (m *MockMessager) PublishPasswordResetEmail(toAddress, subject, name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPasswordResetEmail", toAddress, subject, name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPasswordResetEmail indicates an expected call of PublishPasswordResetEmail.
func (mr *MockMessagerMockRecorder) PublishPasswordResetEmail(toAddress, subject, name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPasswordResetEmail", reflect.TypeOf((*MockMessager)(nil).PublishPasswordResetEmail), toAddress, subject, name, token)
}

// PublishPasswordResetPhone mocks base method.
func (m *MockMessager) PublishPasswordResetPhone(phone, name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPasswordResetPhone", phone, name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPasswordResetPhone indicates an expected call of PublishPasswordResetPhone.
func (mr *MockMessagerMockRecorder) PublishPasswordResetPhone(phone, name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPasswordResetPhone", reflect.TypeOf((*MockMessager)(nil).PublishPasswordResetPhone), phone, name, token)
}

// PublishVerificationEmail mocks base method.
func (m *MockMessager) PublishVerificationEmail(toAddress, subject, name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVerificationEmail", toAddress, subject, name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishVerificationEmail indicates an expected call of PublishVerificationEmail.
func (mr *MockMessagerMockRecorder) PublishVerificationEmail(toAddress, subject, name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVerificationEmail", reflect.TypeOf((*MockMessager)(nil).PublishVerificationEmail), toAddress, subject, name, token)
}

// PublishVerificationPhone mocks base method.
func (m *MockMessager) PublishVerificationPhone(phone, name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVerificationPhone", phone, name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishVerificationPhone indicates an expected call of PublishVerificationPhone.
func (mr *MockMessagerMockRecorder) PublishVerificationPhone(phone, name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVerificationPhone", reflect.TypeOf((*MockMessager)(nil).PublishVerificationPhone), phone, name, token)
}

// MockOAuthProvider is a mock of OAuthProvider interface.
type MockOAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProviderMockRecorder
}

// MockOAuthProviderMockRecorder is the mock recorder for MockOAuthProvider.
type MockOAuthProviderMockRecorder struct {
	mock *MockOAuthProvider
}

// NewMockOAuthProvider creates a new mock instance.
func NewMockOAuthProvider(ctrl *gomock.Controller) *MockOAuthProvider {
	mock := &MockOAuthProvider{ctrl: ctrl}
	mock.recorder = &MockOAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProvider) EXPECT() *MockOAuthProviderMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockOAuthProvider) VerifyToken(ctx context.Context, provider, token string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, provider, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockOAuthProviderMockRecorder) VerifyToken(ctx, provider, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockOAuthProvider)(nil).VerifyToken), ctx, provider, token)
}
