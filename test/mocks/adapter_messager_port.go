// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/loganrk/user-vault/internal/core/port (interfaces: Messager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessager is a mock of Messager interface.
type MockMessager struct {
	ctrl     *gomock.Controller
	recorder *MockMessagerMockRecorder
}

// MockMessagerMockRecorder is the mock recorder for MockMessager.
type MockMessagerMockRecorder struct {
	mock *MockMessager
}

// NewMockMessager creates a new mock instance.
func NewMockMessager(ctrl *gomock.Controller) *MockMessager {
	mock := &MockMessager{ctrl: ctrl}
	mock.recorder = &MockMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessager) EXPECT() *MockMessagerMockRecorder {
	return m.recorder
}

// PublishPasswordResetEmail mocks base method.
func (m *MockMessager) PublishPasswordResetEmail(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPasswordResetEmail", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPasswordResetEmail indicates an expected call of PublishPasswordResetEmail.
func (mr *MockMessagerMockRecorder) PublishPasswordResetEmail(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPasswordResetEmail", reflect.TypeOf((*MockMessager)(nil).PublishPasswordResetEmail), arg0, arg1, arg2, arg3)
}

// PublishPasswordResetPhone mocks base method.
func (m *MockMessager) PublishPasswordResetPhone(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPasswordResetPhone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPasswordResetPhone indicates an expected call of PublishPasswordResetPhone.
func (mr *MockMessagerMockRecorder) PublishPasswordResetPhone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPasswordResetPhone", reflect.TypeOf((*MockMessager)(nil).PublishPasswordResetPhone), arg0, arg1, arg2)
}

// PublishVerificationEmail mocks base method.
func (m *MockMessager) PublishVerificationEmail(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVerificationEmail", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishVerificationEmail indicates an expected call of PublishVerificationEmail.
func (mr *MockMessagerMockRecorder) PublishVerificationEmail(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVerificationEmail", reflect.TypeOf((*MockMessager)(nil).PublishVerificationEmail), arg0, arg1, arg2, arg3)
}

// PublishVerificationPhone mocks base method.
func (m *MockMessager) PublishVerificationPhone(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVerificationPhone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishVerificationPhone indicates an expected call of PublishVerificationPhone.
func (mr *MockMessagerMockRecorder) PublishVerificationPhone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVerificationPhone", reflect.TypeOf((*MockMessager)(nil).PublishVerificationPhone), arg0, arg1, arg2)
}

// RegisterPasswordReset mocks base method.
func (m *MockMessager) RegisterPasswordReset(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterPasswordReset", arg0)
}

// RegisterPasswordReset indicates an expected call of RegisterPasswordReset.
func (mr *MockMessagerMockRecorder) RegisterPasswordReset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPasswordReset", reflect.TypeOf((*MockMessager)(nil).RegisterPasswordReset), arg0)
}

// RegisterVerification mocks base method.
func (m *MockMessager) RegisterVerification(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterVerification", arg0)
}

// RegisterVerification indicates an expected call of RegisterVerification.
func (mr *MockMessagerMockRecorder) RegisterVerification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVerification", reflect.TypeOf((*MockMessager)(nil).RegisterVerification), arg0)
}
