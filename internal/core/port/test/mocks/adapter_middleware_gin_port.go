// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/loganrk/user-vault/internal/core/port (interfaces: GinMiddleware)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGinMiddleware is a mock of GinMiddleware interface.
type MockGinMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockGinMiddlewareMockRecorder
}

// MockGinMiddlewareMockRecorder is the mock recorder for MockGinMiddleware.
type MockGinMiddlewareMockRecorder struct {
	mock *MockGinMiddleware
}

// NewMockGinMiddleware creates a new mock instance.
func NewMockGinMiddleware(ctrl *gomock.Controller) *MockGinMiddleware {
	mock := &MockGinMiddleware{ctrl: ctrl}
	mock.recorder = &MockGinMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGinMiddleware) EXPECT() *MockGinMiddlewareMockRecorder {
	return m.recorder
}

// ValidateApiKey mocks base method.
func (m *MockGinMiddleware) ValidateApiKey() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApiKey")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// ValidateApiKey indicates an expected call of ValidateApiKey.
func (mr *MockGinMiddlewareMockRecorder) ValidateApiKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApiKey", reflect.TypeOf((*MockGinMiddleware)(nil).ValidateApiKey))
}

// ValidateRefreshToken mocks base method.
func (m *MockGinMiddleware) ValidateRefreshToken() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockGinMiddlewareMockRecorder) ValidateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockGinMiddleware)(nil).ValidateRefreshToken))
}
