// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/loganrk/user-vault/internal/core/port (interfaces: UserSvr)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/loganrk/user-vault/internal/core/domain"
)

// MockUserSvr is a mock of UserSvr interface.
type MockUserSvr struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvrMockRecorder
}

// MockUserSvrMockRecorder is the mock recorder for MockUserSvr.
type MockUserSvrMockRecorder struct {
	mock *MockUserSvr
}

// NewMockUserSvr creates a new mock instance.
func NewMockUserSvr(ctrl *gomock.Controller) *MockUserSvr {
	mock := &MockUserSvr{ctrl: ctrl}
	mock.recorder = &MockUserSvrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSvr) EXPECT() *MockUserSvrMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method.
func (m *MockUserSvr) ForgotPassword(arg0 context.Context, arg1 domain.UserForgotPasswordClientRequest) (domain.UserForgotPasswordClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", arg0, arg1)
	ret0, _ := ret[0].(domain.UserForgotPasswordClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserSvrMockRecorder) ForgotPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserSvr)(nil).ForgotPassword), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserSvr) Login(arg0 context.Context, arg1 domain.UserLoginClientRequest) (domain.UserLoginClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(domain.UserLoginClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserSvrMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserSvr)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockUserSvr) Logout(arg0 context.Context, arg1 domain.UserLogoutClientRequest) (domain.UserLogoutClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(domain.UserLogoutClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserSvrMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserSvr)(nil).Logout), arg0, arg1)
}

// OAuthLogin mocks base method.
func (m *MockUserSvr) OAuthLogin(arg0 context.Context, arg1 domain.UserOAuthLoginClientRequest) (domain.UserLoginClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthLogin", arg0, arg1)
	ret0, _ := ret[0].(domain.UserLoginClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// OAuthLogin indicates an expected call of OAuthLogin.
func (mr *MockUserSvrMockRecorder) OAuthLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthLogin", reflect.TypeOf((*MockUserSvr)(nil).OAuthLogin), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockUserSvr) RefreshToken(arg0 context.Context, arg1 domain.UserRefreshTokenClientRequest) (domain.UserRefreshTokenClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(domain.UserRefreshTokenClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUserSvrMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUserSvr)(nil).RefreshToken), arg0, arg1)
}

// Register mocks base method.
func (m *MockUserSvr) Register(arg0 context.Context, arg1 domain.UserRegisterClientRequest) (domain.UserRegisterClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(domain.UserRegisterClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserSvrMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserSvr)(nil).Register), arg0, arg1)
}

// ResendVerification mocks base method.
func (m *MockUserSvr) ResendVerification(arg0 context.Context, arg1 domain.UserResendVerificationClientRequest) (domain.UserResendVerificationClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendVerification", arg0, arg1)
	ret0, _ := ret[0].(domain.UserResendVerificationClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// ResendVerification indicates an expected call of ResendVerification.
func (mr *MockUserSvrMockRecorder) ResendVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendVerification", reflect.TypeOf((*MockUserSvr)(nil).ResendVerification), arg0, arg1)
}

// ResetPassword mocks base method.
func (m *MockUserSvr) ResetPassword(arg0 context.Context, arg1 domain.UserResetPasswordClientRequest) (domain.UserResetPasswordClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(domain.UserResetPasswordClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserSvrMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserSvr)(nil).ResetPassword), arg0, arg1)
}

// VerifyUser mocks base method.
func (m *MockUserSvr) VerifyUser(arg0 context.Context, arg1 domain.UserVerifyClientRequest) (domain.UserVerifyClientResponse, domain.ErrorRes) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", arg0, arg1)
	ret0, _ := ret[0].(domain.UserVerifyClientResponse)
	ret1, _ := ret[1].(domain.ErrorRes)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockUserSvrMockRecorder) VerifyUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserSvr)(nil).VerifyUser), arg0, arg1)
}
