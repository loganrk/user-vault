// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/loganrk/user-vault/internal/core/port (interfaces: Handler)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// UserForgotPassword mocks base method.
func (m *MockHandler) UserForgotPassword(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserForgotPassword", arg0, arg1)
}

// UserForgotPassword indicates an expected call of UserForgotPassword.
func (mr *MockHandlerMockRecorder) UserForgotPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserForgotPassword", reflect.TypeOf((*MockHandler)(nil).UserForgotPassword), arg0, arg1)
}

// UserLogin mocks base method.
func (m *MockHandler) UserLogin(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserLogin", arg0, arg1)
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockHandlerMockRecorder) UserLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockHandler)(nil).UserLogin), arg0, arg1)
}

// UserLogout mocks base method.
func (m *MockHandler) UserLogout(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserLogout", arg0, arg1)
}

// UserLogout indicates an expected call of UserLogout.
func (mr *MockHandlerMockRecorder) UserLogout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogout", reflect.TypeOf((*MockHandler)(nil).UserLogout), arg0, arg1)
}

// UserOAuthLogin mocks base method.
func (m *MockHandler) UserOAuthLogin(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserOAuthLogin", arg0, arg1)
}

// UserOAuthLogin indicates an expected call of UserOAuthLogin.
func (mr *MockHandlerMockRecorder) UserOAuthLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOAuthLogin", reflect.TypeOf((*MockHandler)(nil).UserOAuthLogin), arg0, arg1)
}

// UserPasswordReset mocks base method.
func (m *MockHandler) UserPasswordReset(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserPasswordReset", arg0, arg1)
}

// UserPasswordReset indicates an expected call of UserPasswordReset.
func (mr *MockHandlerMockRecorder) UserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPasswordReset", reflect.TypeOf((*MockHandler)(nil).UserPasswordReset), arg0, arg1)
}

// UserRefreshToken mocks base method.
func (m *MockHandler) UserRefreshToken(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserRefreshToken", arg0, arg1)
}

// UserRefreshToken indicates an expected call of UserRefreshToken.
func (mr *MockHandlerMockRecorder) UserRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRefreshToken", reflect.TypeOf((*MockHandler)(nil).UserRefreshToken), arg0, arg1)
}

// UserRegister mocks base method.
func (m *MockHandler) UserRegister(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserRegister", arg0, arg1)
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockHandlerMockRecorder) UserRegister(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockHandler)(nil).UserRegister), arg0, arg1)
}

// UserResendVerification mocks base method.
func (m *MockHandler) UserResendVerification(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserResendVerification", arg0, arg1)
}

// UserResendVerification indicates an expected call of UserResendVerification.
func (mr *MockHandlerMockRecorder) UserResendVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResendVerification", reflect.TypeOf((*MockHandler)(nil).UserResendVerification), arg0, arg1)
}

// UserVerify mocks base method.
func (m *MockHandler) UserVerify(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserVerify", arg0, arg1)
}

// UserVerify indicates an expected call of UserVerify.
func (mr *MockHandlerMockRecorder) UserVerify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserVerify", reflect.TypeOf((*MockHandler)(nil).UserVerify), arg0, arg1)
}
